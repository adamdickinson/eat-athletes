schema {
  query: Query
  mutation: Mutation
}

type Query {
  group(id: ID!): Group!
  groups: [Group!]!
  searchGroups(query: String!): [Group!]!
  hello: String!
  measurementResult(id: ID!): MeasurementResult
  shootingResult(id: ID!): ShootingResult
  splitResult(id: ID!): SplitResult
  stageShuttleResult(id: ID!): StageShuttleResult
  timeResult(id: ID!): TimeResult
  test(id: ID!): Test
  tests: [Test!]!
  currentUser: CurrentUserResult
  allAthletesReports: [AthleteReport!]!
  athlete(id: String!): Athlete
  athletes: [Athlete!]!
  searchAthletes(query: String!): [Athlete!]!
  coach(id: String!): Coach
  searchCoaches(query: String!): [Coach!]!
  guest(id: String!): Guest
  searchGuests(query: String!): [Guest!]!
}

type Mutation {
  createGroup(group: GroupInput!): Group!
  deleteGroup(id: ID!): Boolean!
  updateGroup(id: ID!, group: GroupInput!): Group!
  addAthleteToGroup(athlete: ID!, group: ID!): Group!
  removeAthleteFromGroup(athlete: ID!, group: ID!): Group!
  recordMeasurementResult(result: MeasurementResultInput!): MeasurementResult!
  recordMeasurementResults(results: [MeasurementResultInput!]!): [MeasurementResult!]!
  recordShootingResult(result: ShootingResultInput!): ShootingResult!
  recordSplitResult(result: SplitResultInput!): SplitResult!
  recordStageShuttleResult(result: StageShuttleResultInput!): StageShuttleResult!
  recordStageShuttleResults(results: [StageShuttleResultInput!]!): [StageShuttleResult!]!
  recordTimeResult(result: TimeResultInput!): TimeResult!
  recordTimeResults(results: [TimeResultInput!]!): [TimeResult!]!
  createAthlete(athlete: AthleteInput): Athlete!
  deleteAthlete(id: ID!): Athlete!
  restoreAthlete(id: ID!): Athlete!
  updateAthlete(id: ID!, athlete: AthleteInput): Athlete!
  createCoach(coach: CoachInput): Coach!
  deleteCoach(id: ID!): Coach!
  restoreCoach(id: ID!): Coach!
  updateCoach(id: ID!, coach: CoachInput): Coach!
  createGuest(guest: GuestInput): Guest!
  deleteGuest(id: ID!): Guest!
  restoreGuest(id: ID!): Guest!
  updateGuest(id: ID!, guest: GuestInput): Guest!
}

type Group {
  id: ID!
  name: String!
  athletes: [Athlete!]!
}

input GroupInput {
  name: String!
}

interface Result {
  id: ID!
  athlete: Athlete!
  date: String!
  test: Test!
}

type MeasurementResult implements Result {
  id: ID!
  athlete: Athlete!
  date: String!
  test: Test!
  specId: String!
  value: Float!
}

input MeasurementResultInput {
  athlete: ID!
  date: String!
  test: ID!
  specId: String!
  value: Float!
}

type ShootingResult implements Result {
  id: ID!
  athlete: Athlete!
  date: String!
  test: Test!
  attempts: [ShootingAttempt!]!
}

type ShootingAttempt {
  id: ID!
  made: Boolean!
  time: Float
}

input ShootingResultInput {
  athlete: ID!
  date: String!
  test: ID!
  attempts: [ShootingAttemptInput!]!
}

input ShootingAttemptInput {
  made: Boolean!
  time: Float
}

type SplitResult implements Result {
  id: ID!
  athlete: Athlete!
  date: String!
  test: Test!
  splits: [Float!]!
}

input SplitResultInput {
  athlete: ID!
  date: String!
  test: ID!
  splits: [Float!]!
}

type StageShuttleResult implements Result {
  id: ID!
  athlete: Athlete!
  date: String!
  test: Test!
  stage: Int!
  shuttle: Int!
}

input StageShuttleResultInput {
  athlete: ID!
  date: String!
  test: ID!
  stage: Int!
  shuttle: Int!
}

type TimeResult implements Result {
  id: ID!
  athlete: Athlete!
  date: String!
  test: Test!
  time: Float!
}

input TimeResultInput {
  athlete: ID!
  date: String!
  test: ID!
  time: Float!
}

enum TestLimitMetric {
  TIME
  DISTANCE
}

enum TestSpecMetric {
  M_YD
  M_FT
  CM_IN
  CM_FT
  KG_LB
  PERCENTAGE
}

enum ResultType {
  STAGE_SHUTTLE
  SHOTS
  MEASUREMENTS
  TIME
  SPLIT
}

type Test {
  id: ID!
  name: String!
  variation: String
  limit: TestLimit
  resultType: ResultType!
  groupTest: Boolean!
  specs: [TestSpec!]
}

type TestLimit {
  metric: TestLimitMetric!
  value: Float!
}

type TestSpec {
  id: ID!
  name: String!
  metric: TestSpecMetric!
}

type TestContext {
  id: ID!
  goodResult: Float!
  badResult: Float!
  test: Test!
  gradeYear: Int
  group: Group
}

interface User {
  id: ID!
  firstName: String!
  lastName: String!
}

union CurrentUserResult = Athlete | Coach | Guest

type Athlete implements User {
  id: ID!
  age: Int!
  dateOfBirth: String!
  firstName: String!
  graduatingYear: Int!
  groups: [Group]!
  lastName: String!
  photoUrl: String
  position: String
}

type AthleteReport {
  athlete: Athlete!
  results: AthleteResults!
}

type AthleteResults {
  beep: String
  agility: String
  speed: String
  standingVerticalLeap: String
  maxVerticalLeap: String
  height: String
  heightWithShoes: String
  weight: String
  wingspan: String
  standingReach: String
  bodyFat: String
  handLength: String
  handWidth: String
}

input AthleteInput {
  dateOfBirth: String!
  firstName: String!
  graduatingYear: Int!
  lastName: String!
  photoUrl: String
  position: String
}

type Coach implements User {
  id: ID!
  firstName: String!
  lastName: String!
  photoUrl: String
  position: String
}

input CoachInput {
  firstName: String!
  lastName: String!
  photoUrl: String
  position: String
}

type Guest implements User {
  id: ID!
  firstName: String!
  lastName: String!
}

input GuestInput {
  firstName: String!
  lastName: String!
}
